// This class is the skeleton for both Population Units and Buildings
// They share a lot of properties and methods in common
class BaseAsset {
    constructor(title, quantity, costMultiplier, requireToBuyList, produceList, upgradesList, description){
        this.title = title;
        this.quantity = quantity;
        this.costMultiplier = costMultiplier;
        this.produceList = produceList;
        this.requireToBuyList = requireToBuyList;
        this.upgradesList = upgradesList;
    }

    //Verifies if the resources stored in gameStats are enough to buy the unit
    allowedToBuy(){
        let allowed = false;
        for (let i = 0; i < this.requireToBuyList.length; i++){
           allowed = gameStats[this.requireToBuyList[i].type] >= this.requireToBuyList[i].value;
        }
        return allowed;
    }

    //Adds 1 unit if allowed
    add(){
        if (this.allowedToBuy()){
            this.quantity++;
            for (let i = 0; i < this.requireToBuyList.length; i++){
                gameStats[this.requireToBuyList[i].type] -= this.requireToBuyList[i].value;
             }
             drawOnClick();
        }else{
            console.log("Not allowed to buy")
        }
    }

    // Strings methods

    //Returns a String containing a summary of the resources generated by this unit
    produceHourlyMessage(){
        var produceMessage = "Produces: "
        for (let i = 0; i < this.produceList.length; i++){
            produceMessage += `<span>${this.produceList[i].value} ${this.produceList[i].type}</span>`
         }
         return produceMessage;
    }

    //Returns a String containing a summary of the resources needed to buy one
    costToBuyMessage(){
        var costMessage = "Requires: "
        for (let i = 0; i < this.requireToBuyList.length; i++){
            costMessage += `<span>${this.requireToBuyList[i].value} ${this.requireToBuyList[i].type}</span>`
         }
         return costMessage;
    }

    // Resource Generation //
    produceHourly(){
        for (let i = 0; i < this.produceList.length; i++){
            gameStats[this.produceList[i].type] += this.produceList[i].value;
        }
    }
}

class Unit {
    constructor(title, quantity, costMultiplier, produceList, upgradesList, description){
        this.title = title;
        this.quantity = quantity;
        this.costMultiplier = costMultiplier;
        this.produceList = produceList;
        this.upgradesList = upgradesList;
    }

    getCostToBuy(){
        return ((1 + this.quantity) * this.costMultiplier).toFixed(2);
    }

    add(){
        if (gameStats.food >= this.getCostToBuy()){
            this.quantity++;
            gameStats.food -= this.getCostToBuy();
        }
        drawOnClick();
    }

    produceHourly(){
        for (let i = 0; i < this.produceList.length; i++){
            gameStats[this.produceList[i].type] += this.getOutcomeValue(this.produceList[i]);
        }
    }

    getOutcomeValue(produceItem){
        return produceItem.value * this.quantity;
    }

    kill(){
        if (this.quantity > 0)
            this.quantity--;
    }
}

class Clicker {
    constructor(type, title, resource, costMultiplier, upgradesList){
        this.type = type;
        this.title = title;
        this.resource = resource;
        this.costMultiplier = costMultiplier;
        this.upgradesList = upgradesList;
    }

    addResource(){
        switch(this.type){
            case 'food': gameStats.food++;
            break;
            case 'wood': gameStats.wood++;
            break;
        }
        drawOnClick();
    }
}

class Building {
    constructor(title, quantity, costMultiplier, requireToBuyList, produceList, upgradesList, description){
        this.title = title;
        this.quantity = quantity;
        this.costMultiplier = costMultiplier;
        this.produceList = produceList;
        this.requireToBuyList = requireToBuyList;
        this.upgradesList = upgradesList;
    }

    allowedToBuy(){
        let allowed = false;
        for (let i = 0; i < this.requireToBuyList.length; i++){
           allowed = gameStats[this.requireToBuyList[i].type] >= this.requireToBuyList[i].value;
        }
        return allowed;
    }

    add(){
        if (this.allowedToBuy){
            this.quantity++;
            for (let i = 0; i < this.requireToBuyList.length; i++){
                gameStats[this.requireToBuyList[i].type] -= this.requireToBuyList[i].value;
             }
        }
    }
}